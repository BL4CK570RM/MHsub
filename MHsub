#!/bin/bash

# Colors for output
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
NC="\e[0m" # No color

# Current version
VERSION="1.0.0.1"

# GitHub repository information
GITHUB_USER="BL4CK570RM"
GITHUB_REPO="MHsub"
GITHUB_BRANCH="main"
RAW_BASE_URL="https://raw.githubusercontent.com/$GITHUB_USER/$GITHUB_REPO/$GITHUB_BRANCH"

# Print MHsub ASCII Art Banner
print_banner() {
  echo -e "${GREEN}
                                                                                        bbbbbbbb            
MMMMMMMM               MMMMMMMMHHHHHHHHH     HHHHHHHHH                                  b::::::b            
M:::::::M             M:::::::MH:::::::H     H:::::::H                                  b::::::b            
M::::::::M           M::::::::MH:::::::H     H:::::::H                                  b::::::b            
M:::::::::M         M:::::::::MHH::::::H     H::::::HH                                   b:::::b            
M::::::::::M       M::::::::::M  H:::::H     H:::::H      ssssssssss   uuuuuu    uuuuuu  b:::::bbbbbbbbb    
M:::::::::::M     M:::::::::::M  H:::::H     H:::::H    ss::::::::::s  u::::u    u::::u  b::::::::::::::bb  
M:::::::M::::M   M::::M:::::::M  H::::::HHHHH::::::H  ss:::::::::::::s u::::u    u::::u  b::::::::::::::::b 
M::::::M M::::M M::::M M::::::M  H:::::::::::::::::H  s::::::ssss:::::su::::u    u::::u  b:::::bbbbb:::::::b
M::::::M  M::::M::::M  M::::::M  H:::::::::::::::::H   s:::::s  ssssss u::::u    u::::u  b:::::b    b::::::b
M::::::M   M:::::::M   M::::::M  H::::::HHHHH::::::H     s::::::s      u::::u    u::::u  b:::::b     b:::::b
M::::::M    M:::::M    M::::::M  H:::::H     H:::::H        s::::::s   u::::u    u::::u  b:::::b     b:::::b
M::::::M     MMMMM     M::::::M  H:::::H     H:::::H  ssssss   s:::::s u:::::uuuu:::::u  b:::::b     b:::::b
M::::::M               M::::::MHH::::::H     H::::::HHs:::::ssss::::::su:::::::::::::::uub:::::bbbbbb::::::b
M::::::M               M::::::MH:::::::H     H:::::::Hs::::::::::::::s  u:::::::::::::::ub::::::::::::::::b 
M::::::M               M::::::MH:::::::H     H:::::::H s:::::::::::ss    uu::::::::uu:::ub:::::::::::::::b  
MMMMMMMM               MMMMMMMMHHHHHHHHH     HHHHHHHHH  sssssssssss        uuuuuuuu  uuuubbbbbbbbbbbbbbbb    

       üîç Subdomain Enumeration Tool (v$VERSION)
     üöÄ Coded by BL4CK_570RM | 2025
${NC}"
}

# Display usage information
usage() {
  print_banner
  echo -e "${YELLOW}Usage:${NC}"
  echo -e "  MHsub -d <domain> -a <all_domains_output.txt> -l <live_domains_output.txt> [-m lite|deep]"
  echo -e "  MHsub --update"
  echo -e "  MHsub -h | --help"
  echo -e ""
  echo -e "${YELLOW}Required Options:${NC}"
  echo -e "  -d, --domain        Target domain to enumerate (e.g., example.com)"
  echo -e "  -a, --all-subs      Output file to save all discovered subdomains"
  echo -e "  -l, --live-subs     Output file to save live subdomains"
  echo -e ""
  echo -e "${YELLOW}Scan Modes:${NC}"
  echo -e "  -m, --mode          Scan mode (default: lite)"
  echo -e "      lite            Fast scan (skip Amass for speed)"
  echo -e "      deep            Comprehensive scan (include Amass)"
  echo -e ""
  echo -e "${YELLOW}Update Options:${NC}"
  echo -e "  -up, --update       Update MHsub to the latest version"
  echo -e ""
  echo -e "${YELLOW}Optional Flags:${NC}"
  echo -e "  -h, --help          Show this help message and exit"
  echo -e ""
  echo -e "${YELLOW}Examples:${NC}"
  echo -e "  MHsub -d example.com -a all.txt -l live.txt -m lite"
  echo -e "  MHsub --domain example.com --all-subs all.txt --live-subs live.txt --mode deep"
  echo -e "  MHsub --update"
  echo -e ""
  echo -e "${YELLOW}Description:${NC}"
  echo -e "  MHsub is a powerful subdomain enumeration tool with two scan modes:"
  echo -e "  - Lite mode (fast): Uses subfinder, assetfinder, sublister, findomain, crt.sh"
  echo -e "  - Deep mode (slow): Adds Amass for comprehensive discovery"
  exit 0
}

# Check if required tools are installed
check_tools() {
  local tools=("subfinder" "assetfinder" "sublist3r" "findomain" "jq" "httpx" "curl")
  if [[ "$MODE" == "deep" ]]; then
    tools+=("amass")
  fi
  
  local missing=()
  
  for tool in "${tools[@]}"; do
    if ! command -v "$tool" >/dev/null 2>&1; then
      missing+=("$tool")
    fi
  done

  if [ ${#missing[@]} -gt 0 ]; then
    echo -e "${RED}[!] The following tools are missing:${NC}"
    for m in "${missing[@]}"; do
      echo -e "  - $m"
    done
    echo -e "${YELLOW}Please install them before running MHsub.${NC}"
    exit 1
  fi
}

# Check for updates
check_update() {
  LATEST_VERSION=$(curl -s "$RAW_BASE_URL/version.txt" || echo "error")
  if [[ "$LATEST_VERSION" == "error" ]]; then
    echo -e "${RED}[!] Failed to check for updates${NC}"
    return 2
  elif [[ "$LATEST_VERSION" != "$VERSION" ]]; then
    echo -e "${YELLOW}[!] New version available: $LATEST_VERSION (Current: $VERSION)${NC}"
    return 1
  fi
  return 0
}

# Update function
update_tool() {
  echo -e "${BLUE}[+] Starting update process...${NC}"
  
  # Get the script URL
  SCRIPT_URL="$RAW_BASE_URL/MHsub.sh"
  TEMP_FILE=$(mktemp)
  
  echo -e "${BLUE}[+] Downloading latest version from GitHub...${NC}"
  if ! curl -s "$SCRIPT_URL" -o "$TEMP_FILE"; then
    echo -e "${RED}[!] Failed to download update${NC}"
    return 1
  fi
  
  # Validate the downloaded script
  if ! grep -q "MHsub" "$TEMP_FILE"; then
    echo -e "${RED}[!] Downloaded file is not a valid MHsub script${NC}"
    rm "$TEMP_FILE"
    return 1
  fi
  
  # Create backup
  BACKUP_FILE="$0.bak"
  echo -e "${YELLOW}[+] Creating backup at $BACKUP_FILE${NC}"
  cp "$0" "$BACKUP_FILE"
  
  # Install new version
  echo -e "${BLUE}[+] Installing new version...${NC}"
  chmod +x "$TEMP_FILE"
  if ! mv "$TEMP_FILE" "$0"; then
    echo -e "${RED}[!] Failed to install update - try running with sudo${NC}"
    return 1
  fi
  
  echo -e "${GREEN}[+] Successfully updated to version $LATEST_VERSION${NC}"
  return 0
}

# Run a tool and handle its output
run_tool() {
  local tool_name="$1"
  local command="$2"
  local output_file="$3"
  
  echo -e "${BLUE}[+] Running $tool_name...${NC}"
  if eval "$command" > "$output_file" 2>&1; then
    local count=$(wc -l < "$output_file" | tr -d ' ')
    echo -e "${GREEN}[+] $tool_name found $count subdomains${NC}"
  else
    echo -e "${RED}[!] $tool_name failed to run${NC}"
    # Create empty file if it doesn't exist
    touch "$output_file"
  fi
}

# Main subdomain enumeration function
enumerate_subdomains() {
  local domain="$1"
  local mode="$2"
  local all_subs_file="$3"
  local live_subs_file="$4"
  
  # Create temp directory
  local tmpdir=$(mktemp -d)
  echo -e "${GREEN}[+] Created temporary working directory: $tmpdir${NC}"
  echo -e "${GREEN}[+] Running in ${BLUE}$mode${GREEN} mode${NC}"

  # Run enumeration tools in parallel
  echo -e "${GREEN}[+] Starting subdomain enumeration for: $domain${NC}"

  run_tool "Subfinder" "subfinder -d \"$domain\" -silent" "$tmpdir/subfinder.txt" &
  run_tool "Assetfinder" "assetfinder --subs-only \"$domain\"" "$tmpdir/assetfinder.txt" &
  run_tool "Sublist3r" "sublist3r -d \"$domain\" -o -" "$tmpdir/sublister.txt" &
  run_tool "Findomain" "findomain -t \"$domain\" -q" "$tmpdir/findomain.txt" &
  run_tool "crt.sh" "curl -s \"https://crt.sh/?q=%25.$domain&output=json\" | jq -r '.[].name_value' | sed 's/\\*\\.//g'" "$tmpdir/crtsh.txt" &

  # Only run Amass in deep mode
  if [[ "$mode" == "deep" ]]; then
    echo -e "${YELLOW}[!] Running Amass (this may take a while)...${NC}"
    run_tool "Amass" "amass enum -passive -d \"$domain\"" "$tmpdir/amass.txt" &
  fi

  # Wait for all background processes to complete
  wait

  # Combine and deduplicate results
  echo -e "${BLUE}[+] Combining and deduplicating results...${NC}"
  cat "$tmpdir"/*.txt | sort -u > "$all_subs_file"
  local total_subs=$(wc -l < "$all_subs_file" | tr -d ' ')
  echo -e "${GREEN}[+] Found $total_subs unique subdomains. Saved to: $all_subs_file${NC}"

  # Check for live subdomains
  echo -e "${BLUE}[+] Checking for live subdomains using httpx...${NC}"
  httpx -l "$all_subs_file" -silent -status-code -title -tech-detect -o "$tmpdir/httpx_results.txt" 2>/dev/null

  # Extract just the URLs from httpx output
  awk '{print $1}' "$tmpdir/httpx_results.txt" > "$live_subs_file"
  local live_count=$(wc -l < "$live_subs_file" | tr -d ' ')
  echo -e "${GREEN}[+] Found $live_count live subdomains. Saved to: $live_subs_file${NC}"

  # Optional: Save full httpx results
  local full_httpx="${live_subs_file%.*}_full_httpx.txt"
  cp "$tmpdir/httpx_results.txt" "$full_httpx"
  echo -e "${GREEN}[+] Full httpx results saved to: $full_httpx${NC}"

  # Cleanup
  echo -e "${BLUE}[+] Cleaning up temporary files...${NC}"
  rm -rf "$tmpdir"
  echo -e "${GREEN}[+] Done!${NC}"
}

# Main script execution
main() {
  # Initialize variables
  local domain=""
  local all_subs=""
  local live_subs=""
  local mode="lite"
  local update_flag=false

  # Parse command line arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d|--domain)
        domain="$2"
        shift 2
        ;;
      -a|--all-subs)
        all_subs="$2"
        shift 2
        ;;
      -l|--live-subs)
        live_subs="$2"
        shift 2
        ;;
      -m|--mode)
        mode="$2"
        if [[ "$mode" != "lite" && "$mode" != "deep" ]]; then
          echo -e "${RED}[!] Invalid mode. Use 'lite' or 'deep'${NC}"
          exit 1
        fi
        shift 2
        ;;
      -up|--update)
        update_flag=true
        shift
        ;;
      -h|--help)
        usage
        ;;
      *)
        echo -e "${RED}[!] Unknown argument: $1${NC}"
        usage
        exit 1
        ;;
    esac
  done

  # Handle update request
  if [[ "$update_flag" == true ]]; then
    check_update
    case $? in
      1)
        read -p "Do you want to update now? [Y/n] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
          update_tool
          exit $?
        fi
        ;;
      0)
        echo -e "${GREEN}[‚úì] You already have the latest version ($VERSION).${NC}"
        ;;
      2)
        echo -e "${RED}[!] Update check failed${NC}"
        ;;
    esac
    exit 0
  fi

  # Validate arguments
  if [ -z "$domain" ] || [ -z "$all_subs" ] || [ -z "$live_subs" ]; then
    echo -e "${RED}[!] Error: Missing required arguments${NC}"
    usage
    exit 1
  fi

  print_banner

  # Check for updates on script run (only once per day)
  local last_update_file="$HOME/.mhsub_last_update_check"
  if [ ! -f "$last_update_file" ] || [ "$(date +%s)" -gt $(( $(date +%s -r "$last_update_file") + 86400 )) ]; then
    check_update
    case $? in
      1) echo -e "${YELLOW}[!] Run 'MHsub --update' to get the latest version${NC}" ;;
      2) echo -e "${RED}[!] Failed to check for updates${NC}" ;;
    esac
    date +%s > "$last_update_file"
  fi

  # Check for required tools
  check_tools

  # Run the subdomain enumeration
  enumerate_subdomains "$domain" "$mode" "$all_subs" "$live_subs"
}

# Execute main function
main "$@"
